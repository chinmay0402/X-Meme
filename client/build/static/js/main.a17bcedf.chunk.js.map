{"version":3,"sources":["components/Header.js","components/EditMeme.js","components/Meme.js","components/Memes.js","components/AddMeme.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","onAdd","showAdd","className","href","onClick","defaultProps","EditMeme","onEdit","meme","useState","name","setName","url","setUrl","caption","setCaption","onSubmit","e","newMeme","id","type","placeholder","value","readOnly","required","onChange","target","currentTarget","Meme","onDelete","showEditMeme","setShowEditMeme","xmlns","width","height","fill","viewBox","cursor","d","fillRule","src","onError","onerror","alt","Memes","memes","List","i","length","push","map","AddMeme","App","showAddMeme","setShowAddMeme","setMemes","PORT","useEffect","pathname","window","location","fetch","then","res","json","data","memesFromServer","catch","err","console","log","getMemes","addMeme","a","method","headers","body","JSON","stringify","editMeme","result","deleteMeme","filter","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a17bcedf.chunk.js","sourcesContent":["import PropTypes from \"prop-types\"\n\nconst Header = ({ title, onAdd, showAdd }) => {\n    return (\n        <header className=\"header\">\n            <a href=\"/memes\" className=\"logo\"><h1>{title}</h1></a>\n            <button className=\"butn justify-right\"\n                onClick={onAdd}>{showAdd ? \"Close\" : \"Add Meme\"}</button>\n        </header>\n    )\n}\n\nHeader.defaultProps = {\n    title: 'XMeme',\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\nexport default Header;","import { useState } from \"react\"\nconst EditMeme = ({ onEdit, meme }) => {\n    const [name, setName] = useState(meme.name);\n    const [url, setUrl] = useState(meme.url);\n    const [caption, setCaption] = useState(meme.caption);\n    const onSubmit = (e) => {\n        const newMeme = { name, url, caption }\n        onEdit(meme.id, newMeme);\n        setName('');\n        setUrl('');\n        setCaption('');\n    }\n    return (\n        <form className=\"add-form\" onSubmit={onSubmit}>\n            <div className=\"form-control\">\n                <label>Meme-Owner* </label>\n                <input\n                    type=\"text\"\n                    className=\"border rounded\"\n                    placeholder=\"Write in your name\"\n                    value={name}\n                    readOnly\n                    required\n                />\n            </div>\n            <div className=\"form-control\">\n                <label>Meme Url* </label>\n                <input\n                    type=\"url\"\n                    className=\"border rounded\"\n                    placeholder=\"URL of meme here\"\n                    value={url}\n                    onChange={(e) => setUrl(e.target.value)}\n                    required\n                />\n            </div>\n            <div className=\"form-control\">\n                <label>Caption* </label>\n                <input\n                    type=\"text\"\n                    className=\"border rounded\"\n                    value={caption}\n                    onChange={(e) => setCaption(e.currentTarget.value)}\n                    required\n                />\n            </div>\n\n            <input type=\"submit\" value=\"Update Meme\" className=\"btn btn-outline-success\" />\n        </form>\n    )\n}\n\nexport default EditMeme;","import EditMeme from \"./EditMeme\"\nimport { useState } from \"react\"\n\nconst Meme = ({ meme, onDelete, onEdit }) => {\n    const [showEditMeme, setShowEditMeme] = useState(true)\n    const OnEdit = () => {\n        setShowEditMeme(!showEditMeme);\n    }\n    return (\n        <div className=\"meme shadow p-1 mb-5 bg-white rounded border border-shadow border-light\">\n            <div className=\"meme-head\">\n                <h6 className=\"meme-owner\">{meme.name}</h6>\n                <div className=\"options\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"green\" viewBox=\"0 0 16 16\" onClick={() => OnEdit()} cursor=\"pointer\" className=\"edit\">\n                        <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\n                        <path fillRule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\" />\n                    </svg>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"red\" viewBox=\"0 0 15 15\" onClick={() => onDelete(meme.id)} cursor=\"pointer\" className=\"delete justify-right\">\n                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n                        <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\n                    </svg>\n                </div>\n            </div>\n\n            {(showEditMeme) ? (\n                <div>\n                    <img src={meme.url} onError={(e) => { e.target.onerror = null; e.target.src = \"https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg\" }} alt=\"meme\" />\n                    <p className=\"caption lead\">{meme.caption}</p>\n                </div>\n            ) : (\n                    <EditMeme onEdit={onEdit} meme={meme} />\n                )}\n        </div>\n    )\n}\n\nexport default Meme\n","import Meme from \"./Meme\"\nconst Memes = ({ memes, onDelete, onEdit }) => {\n    const List = [];\n    for(let i=memes.length-1; i>=0; i--){\n        List.push(memes[i]);\n    }\n    return (\n        <div className=\"all-memes shadow-sm p-5 mb-5 bg-white rounded border border-shadow border-light\">\n            {List.map((meme) => (\n                <Meme key={meme.id} meme={meme} onDelete={onDelete} onEdit={onEdit}/>\n            ))}\n        </div>\n    )\n}\n\nexport default Memes\n","import {useState} from \"react\"\nconst AddMeme = ({ onAdd }) => {\n    const [name, setName] = useState('');\n    const [url, setUrl] = useState('');\n    const [caption, setCaption] = useState('');\n\n    const onSubmit = (e) => {\n        onAdd({name, url, caption});\n\n        setName('');\n        setUrl('');\n        setCaption('');\n    }\n\n    return (\n        <form className=\"add-form\" onSubmit={onSubmit}>\n          <div className=\"form-control\">\n            <label>Meme-Owner* </label>\n            <input\n              type=\"text\"\n              className=\"input-control border rounded\"\n              placeholder=\"Write in your name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Meme Url* </label>\n            <input\n              type=\"url\"\n              className=\"border rounded\"\n              placeholder=\"URL of meme here\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Caption* </label>\n            <input\n              type=\"text\"\n              className=\"border rounded\"\n              placeholder=\"Be creative with your caption\"\n              value={caption}\n              onChange={(e) => setCaption(e.currentTarget.value)}\n              required\n            />\n          </div>\n    \n          <input type=\"submit\" value=\"Submit Meme\" className=\"btn btn-outline-success\" />\n        </form>\n      )\n}\n\nexport default AddMeme;","import { useState, useEffect } from \"react\"\nimport Header from \"./components/Header\";\nimport Memes from \"./components/Memes\";\nimport AddMeme from \"./components/AddMeme\";\nimport Meme from \"./components/Meme\"\n\nconst App = () => {\n  const [showAddMeme, setShowAddMeme] = useState(false)\n  const [memes, setMemes] = useState([])\n  const PORT = 8081\n  useEffect(() => {\n    const getMemes = () => {\n      const pathname = window.location.pathname;\n      fetch(`http://localhost:${PORT}${pathname}`)\n        .then(res => {\n          return res.json();\n        })\n        .then(data => {\n          return data;\n        })\n        .then(memesFromServer => {\n          setMemes(memesFromServer);\n        })\n        .catch(err => {\n          console.log(err);\n        })\n    }\n    getMemes()\n  }, [])\n\n  // Add Meme\n  const addMeme = async (meme) => {\n    const res = await fetch(`http://localhost:${PORT}/memes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(meme),\n    })\n    const data = await res.json();\n    setMemes([...memes, data]);\n  }\n\n  // Edit meme\n  const editMeme = async (id, meme) => {\n    fetch(`http://localhost:${PORT}/memes/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(meme),\n    })\n      .then(result => {\n        console.log(result);\n        setMemes([...memes])\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  // Delete Meme\n  const deleteMeme = async (id) => {\n    fetch(`http://localhost:${PORT}/memes/${id}`, {\n      method: \"DELETE\",\n    })\n      .then(() => {\n        setMemes(memes.filter((meme) => meme.id !== id));\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n\n  return (\n    <div className=\"container\">\n      <Header\n        onAdd={() => setShowAddMeme(!showAddMeme)}\n        showAdd={showAddMeme}\n      />\n      {showAddMeme && <AddMeme onAdd={addMeme} />}\n\n      {(memes.length > 0) ? (\n        <div>\n          <Memes memes={memes} onDelete={deleteMeme} onEdit={editMeme} />\n        </div>\n      ) : ((typeof (memes) === \"object\" && memes.name !== undefined) ? (\n        <Meme meme={memes} onDelete={deleteMeme} onEdit={editMeme} />\n      ) : (\n         <div>\n          Either there are no memes to show, or the page you requested was not found :(\n          <br/>\n          Click on the \"XMeme\" logo to get back to the home page\n          </div>\n        ))}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}